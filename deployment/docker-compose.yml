version: '3.8'

services:
  jarvis-api:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: jarvis-api
    restart: unless-stopped
    
    environment:
      # Production environment variables
      - JARVIS_JWT_SECRET=${JARVIS_JWT_SECRET}
      - JARVIS_API_KEY_1=${JARVIS_API_KEY_1}
      - JARVIS_API_KEY_1_NAME=production_client
      - JARVIS_API_KEY_1_PERMISSIONS=read,chat,stream
      - JARVIS_ADMIN_KEY=${JARVIS_ADMIN_KEY}
      - JARVIS_ALLOWED_ORIGINS=${JARVIS_ALLOWED_ORIGINS}
      - JARVIS_TRUSTED_HOSTS=${JARVIS_TRUSTED_HOSTS}
      - JARVIS_DB_PATH=/app/data/jarvis_memory.db
      - JARVIS_AUDIO_DIR=/app/data/audio
      - JARVIS_ENABLE_DOCS=false
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
    
    volumes:
      - jarvis_data:/app/data
      - jarvis_logs:/app/logs
      - jarvis_models:/app/models
    
    ports:
      - "127.0.0.1:8000:8000"
    
    networks:
      - jarvis_network
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    # Security
    security_opt:
      - no-new-privileges:true
    read_only: false
    user: "1000:1000"
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nginx:
    image: nginx:1.24-alpine
    container_name: jarvis-nginx
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - certbot_certs:/etc/letsencrypt:ro
      - certbot_www:/var/www/certbot:ro
      - nginx_logs:/var/log/nginx
    
    networks:
      - jarvis_network
    
    depends_on:
      - jarvis-api
    
    # Health check
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  certbot:
    image: certbot/certbot:latest
    container_name: jarvis-certbot
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    
    # Run certbot in standalone mode initially, then use webroot
    command: >
      sh -c "
        certbot certonly --webroot 
        --webroot-path=/var/www/certbot 
        --email your-email@domain.com 
        --agree-tos 
        --no-eff-email 
        -d your-domain.com 
        -d admin.your-domain.com &&
        trap exit TERM; 
        while :; do 
          certbot renew; 
          sleep 12h & wait; 
        done
      "
    
    depends_on:
      - nginx

  # Optional: Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: jarvis-redis
    restart: unless-stopped
    
    volumes:
      - redis_data:/data
    
    networks:
      - jarvis_network
    
    # Security
    command: redis-server --requirepass ${REDIS_PASSWORD}
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: jarvis-prometheus
    restart: unless-stopped
    
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    ports:
      - "127.0.0.1:9090:9090"
    
    networks:
      - jarvis_network
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

volumes:
  jarvis_data:
    driver: local
  jarvis_logs:
    driver: local
  jarvis_models:
    driver: local
  certbot_certs:
    driver: local
  certbot_www:
    driver: local
  nginx_logs:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  jarvis_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16